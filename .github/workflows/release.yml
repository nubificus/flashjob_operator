name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: harbor.nbfc.io
  REGISTRY_IMAGE: harbor.nbfc.io/cloud-iot/akri_operator

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "arm64"]
    outputs:
      digest-amd64: ${{ steps.set-digest-amd64.outputs.digest }}
      digest-arm64: ${{ steps.set-digest-arm64.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract VERSION
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      # 1) Docker login & Buildx
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USER }}
          password: ${{ secrets.HARBOR_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 2) Build & push per-arch image
      - name: Build & push ${{ matrix.arch }}
        id: build-and-push-${{ matrix.arch }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION }}-${{ matrix.arch }}
            ${{ env.REGISTRY_IMAGE }}:latest-${{ matrix.arch }}
        build-args: |
          TARGETOS=linux
          TARGETARCH=${{ matrix.arch }}

      - name: Record digest for ${{ matrix.arch }}
        id: set-digest-${{ matrix.arch }}
        run: echo "digest=${{ steps['build-and-push-' + matrix.arch].outputs.digest }}" >> $GITHUB_OUTPUT

      # 3) Create & push multi-arch manifest (only on amd64)
      - name: Create & push manifest
        if: matrix.arch == 'amd64'
        run: |
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION }} \
            --tag ${{ env.REGISTRY_IMAGE }}:latest \
            ${{ env.REGISTRY_IMAGE }}@${{ needs.build-and-publish.outputs.digest-amd64 }} \
            ${{ env.REGISTRY_IMAGE }}@${{ needs.build-and-publish.outputs.digest-arm64 }}

      # 4) Build install.yaml
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          version: '4.5.7'

      - name: Build install.yaml
        run: |
          mkdir -p dist
          kustomize build config/default > dist/install.yaml

      # 5) Package Helm chart
      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Bump Chart version & appVersion
        run: |
          sed -i "s/^version:.*/version: ${{ env.VERSION }}/" dist/chart/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: ${{ env.VERSION }}/" dist/chart/Chart.yaml

      - name: Bump image tag in values.yaml
        run: |
          sed -i "s/^ *tag:.*/  tag: \"${{ env.VERSION }}\"/" dist/chart/values.yaml

      - name: Package Helm chart
        run: |
          mkdir -p dist/helm-charts/charts
          helm package dist/chart --destination dist/helm-charts/charts --version ${{ env.VERSION }}

      # 6) Upload release assets
      - name: Upload install.yaml & chart
        uses: softprops/action-upload-release-asset@v1
        with:
          tag: ${{ github.ref_name }}
          files: |
            dist/install.yaml
            dist/helm-charts/charts/operator-${{ env.VERSION }}.tgz

      # 7) Update gh-pages for Helm repo
      - name: Configure git
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Clone or create gh-pages
        run: |
          git clone --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages \
            || ( git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages && cd gh-pages && git checkout --orphan gh-pages )

      - name: Update Helm repo index
        run: |
          cd gh-pages
          rm -f *.tgz index.yaml
          cp ../dist/helm-charts/charts/*.tgz .
          helm repo index . --url https://$GITHUB_REPOSITORY_OWNER.github.io/${{ github.event.repository.name }}

      - name: Push gh-pages
        run: |
          cd gh-pages
          git add index.yaml *.tgz
          git commit -m "Helm repo for v${{ env.VERSION }}"
          git push origin gh-pages --force
