name: Build and Push FlashJob Operator Docker Image

on:
  push:
    branches: ["uuid_array"]
  workflow_dispatch:
    inputs:
      registry:
        description: 'Registry to push the image to'
        default: 'harbor.nbfc.io'
        required: false
      version:
        description: 'Version tag for the image'
        default: 'v1.20.1'
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ github.event.inputs.registry || 'harbor.nbfc.io' }}
  REGISTRY_IMAGE: ${{ github.event.inputs.registry || 'harbor.nbfc.io' }}/cloud-iot/akri_operator
  VERSION: ${{ github.event.inputs.version || 'v1.20.1' }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "arm64"]
    outputs:
      digest-amd64: ${{ steps.set-outputs.outputs.digest-amd64 }}
      digest-arm64: ${{ steps.set-outputs.outputs.digest-arm64 }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Harbor registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USER }}
          password: ${{ secrets.HARBOR_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ env.VERSION }}-${{ matrix.arch }}
            type=raw,value=latest-${{ matrix.arch }}

      - name: Build and push ${{ matrix.arch }} image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/${{ matrix.arch }}
          push: true
          build-args: |
            TARGETOS=linux
            TARGETARCH=${{ matrix.arch }}

      - name: Set ${{ matrix.arch }} digest output
        id: set-outputs
        run: |
          echo "digest-${{ matrix.arch }}=${{ steps.build-and-push.outputs.digest }}" >> "$GITHUB_OUTPUT"
        shell: bash

  create-manifest:
    name: Create Merged Docker Image Manifest
    needs: [build]
    runs-on: ubuntu-latest
    outputs:
      digest-merged: ${{ steps.inspect.outputs.digest-merged }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Harbor registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USER }}
          password: ${{ secrets.HARBOR_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest

      - name: Create and push manifest
        run: |
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< \
              "$DOCKER_METADATA_OUTPUT_JSON") \
            ${{ env.REGISTRY_IMAGE }}@${{ needs.build.outputs.digest-amd64 }} \
            ${{ env.REGISTRY_IMAGE }}@${{ needs.build.outputs.digest-arm64 }}
        shell: bash

      - name: Inspect merged image
        id: inspect
        run: |
          digest=$(docker buildx imagetools inspect \
            ${{ env.REGISTRY_IMAGE }}:${{ env.VERSION }} \
            --format '{{json .Manifest}}' | jq -r '.digest')
          if [[ -z "${digest}" ]]; then
            echo "Could not get merged image digest"
            exit 1
          fi
          echo "digest-merged=${digest}" >> "$GITHUB_OUTPUT"
        shell: bash
